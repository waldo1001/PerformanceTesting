// Tables
traces

pageViews






// The pipeline
// Limit results to save time
pageViews 
| take 10








// Filter
pageViews 
| where client_CountryOrRegion == "Belgium"
| take 10 






// Filter in time
pageViews
| where timestamp >= ago(1d)
| where client_CountryOrRegion == "Belgium"






// Top 10 Fastest pages
pageViews
| where timestamp >= ago(1d)
| order by duration asc 
| take 10





// Now with traces
traces
| take 10







// Last 10 traces - eventlog?
traces
| order by timestamp desc 
| take 10 






// Customdimensions
// every event can have different data in customDimensions
// important: eventId
// Analyze a specific eventId: Long Running SQL
traces
| where customDimensions.eventId == 'RT0005'
| order by timestamp desc 
| take 10 






//Extend
traces
| where customDimensions.eventId == 'RT0005'
| extend eventId = tostring(customDimensions.eventId)
| extend extensionPublisher = tostring(customDimensions.extensionPublisher)
| order by timestamp desc 
| take 10 






//When eventids don't matter..
traces
| where isnotempty(customDimensions.executionTime)
| where isnotempty(customDimensions.sqlStatement)
| extend executionTime = customDimensions.executionTime
| take 10 





//Conversion
traces
| where isnotempty(customDimensions.executionTime)
| where isnotempty(customDimensions.sqlStatement)
| extend executionTime = customDimensions.executionTime
, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan 
| take 10 





//Or what about ...

traces
| where isnotempty(customDimensions.executionTime)
| where isnotempty(customDimensions.sqlStatement)
| extend executionTime = customDimensions.executionTime
, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan 
, sqlStatement = customDimensions.sqlStatement
| extend operationType = case(
    sqlStatement startswith "UPDATE", "UPDATE"
    , sqlStatement startswith "DELETE", "DELETE"
    , sqlStatement startswith "BeginTransaction", "BEGIN_TRANS"
    , sqlStatement matches regex "INSERT INTO", "INSERT"
    , sqlStatement startswith "SELECT", "SELECT"
    , sqlStatement matches regex "IF EXISTS \\(SELECT (.*)\\) SELECT", "SELECT'"
    , sqlStatement has "SELECT NEXT VALUE FOR", "SELECT_SEQUENCE_VALUE"
    , sqlStatement has "SELECT @@SPID", "SELECT_SPID"
    , sqlStatement matches regex "(.*)WITH", "SELECT"
    , sqlStatement startswith "CREATE TABLE", "CREATE_TABLE"
    , sqlStatement startswith "ALTER TABLE", "ALTER_TABLE"
    , sqlStatement startswith "exec sp_rename", "RENAME_TABLE" 
    , sqlStatement matches regex "(.*)DROP TABLE", "DROP_TABLE"
    , sqlStatement startswith "SET LOCK_TIMEOUT", "SET_LOCK_TIMEOUT"
    , sqlStatement has "sp_getapplock", "GET_APP_LOCK"
    , "UNKNOWN"
    ) 
| take 10 






// Summerize
// Usages - All events
traces
| where isnotempty(customDimensions.eventId)
| extend eventId = customDimensions.eventId
| summarize count = count() by tostring(eventId)
| order by ['count'] desc





// But .. I want the message with it
traces
| where isnotempty(customDimensions.eventId)
| extend eventId = customDimensions.eventId
| summarize count = count() by tostring(eventId), message
| order by ['count'] desc





// But .. with a decent message, please
traces
| where isnotempty(customDimensions.eventId)
| extend eventId = customDimensions.eventId
    , decentMessage = iif(substring(message, 0, 4) == "Task", "Task Executed", 
                            iif(customDimensions.eventId == "AL0000JRG", "Job Queue Error",
                                    iff(indexof(message, ":") <= 0, message, substring(message, 0, indexof(message, ":")))))
| summarize count = count() by tostring(eventId), decentMessage
| order by ['count'] desc




// But .. some are messages about a success, others are a failure.. 
traces
| where isnotempty(customDimensions.eventId)
| where not (customDimensions.eventId startswith "AL")
| extend submsg = iif(substring(message, 0, 4) == "Task", "Task Executed", 
                    iif(customDimensions.eventId == "AL0000JRG", "Job Queue Error",
                        iff(indexof(message, ":") <= 0, message, substring(message, 0, indexof(message, ":")))))
| extend eventId = customDimensions.eventId
    , status = iif(submsg has "called" 
                    or submsg has "executed"
                        or submsg has 'executed'
                            or submsg has 'succeeded'
                                or submsg has 'rendered'
                                    or submsg has 'successfully'
                                        or submsg has 'taken', "success",
                    iif(submsg has "error"
                            or submsg has 'fail'
                                or submsg has 'failed'
                                    or submsg has 'deadlock'
                                        or submsg has 'timed out',"error",
                        iif(message has 'exceeded', 'too slow',
                            "unknown")))
| summarize count = count() by tostring(eventId), tostring(submsg), status
| order by ['count'] desc






// pageviews per country
pageViews
| where timestamp >= ago(30d)
| summarize count = count() by client_CountryOrRegion




// project
